// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoRequest, error)
	ServerStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (Hello_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Hello_ClientStreamClient, error)
	DuplexStream(ctx context.Context, opts ...grpc.CallOption) (Hello_DuplexStreamClient, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoRequest, error) {
	out := new(EchoRequest)
	err := c.cc.Invoke(ctx, "/proto.Hello/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) ServerStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (Hello_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[0], "/proto.Hello/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_ServerStreamClient interface {
	Recv() (*EchoRequest, error)
	grpc.ClientStream
}

type helloServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloServerStreamClient) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Hello_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[1], "/proto.Hello/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloClientStreamClient{stream}
	return x, nil
}

type Hello_ClientStreamClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoRequest, error)
	grpc.ClientStream
}

type helloClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloClientStreamClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloClientStreamClient) CloseAndRecv() (*EchoRequest, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) DuplexStream(ctx context.Context, opts ...grpc.CallOption) (Hello_DuplexStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[2], "/proto.Hello/DuplexStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloDuplexStreamClient{stream}
	return x, nil
}

type Hello_DuplexStreamClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoRequest, error)
	grpc.ClientStream
}

type helloDuplexStreamClient struct {
	grpc.ClientStream
}

func (x *helloDuplexStreamClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloDuplexStreamClient) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility
type HelloServer interface {
	Echo(context.Context, *EchoRequest) (*EchoRequest, error)
	ServerStream(*EchoRequest, Hello_ServerStreamServer) error
	ClientStream(Hello_ClientStreamServer) error
	DuplexStream(Hello_DuplexStreamServer) error
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (UnimplementedHelloServer) Echo(context.Context, *EchoRequest) (*EchoRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedHelloServer) ServerStream(*EchoRequest, Hello_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedHelloServer) ClientStream(Hello_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedHelloServer) DuplexStream(Hello_DuplexStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DuplexStream not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hello/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).ServerStream(m, &helloServerStreamServer{stream})
}

type Hello_ServerStreamServer interface {
	Send(*EchoRequest) error
	grpc.ServerStream
}

type helloServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloServerStreamServer) Send(m *EchoRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Hello_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).ClientStream(&helloClientStreamServer{stream})
}

type Hello_ClientStreamServer interface {
	SendAndClose(*EchoRequest) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type helloClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloClientStreamServer) SendAndClose(m *EchoRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloClientStreamServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_DuplexStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).DuplexStream(&helloDuplexStreamServer{stream})
}

type Hello_DuplexStreamServer interface {
	Send(*EchoRequest) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type helloDuplexStreamServer struct {
	grpc.ServerStream
}

func (x *helloDuplexStreamServer) Send(m *EchoRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloDuplexStreamServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Hello_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Hello_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Hello_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DuplexStream",
			Handler:       _Hello_DuplexStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}
